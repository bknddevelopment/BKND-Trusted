// Prisma Schema for BKND Trusted
// Optimized for PostgreSQL with PostGIS

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "fullTextSearch", "views"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis, uuid_ossp(map: "uuid-ossp"), pg_trgm(map: "pg_trgm")]
}

// ==================== ENUMS ====================

enum BusinessStatus {
  PENDING
  VERIFIED
  SUSPENDED
  ARCHIVED
}

enum VerificationLevel {
  BASIC
  STANDARD
  PREMIUM
  CERTIFIED
}

enum PriceRange {
  BUDGET    // $
  MODERATE  // $$
  PREMIUM   // $$$
  LUXURY    // $$$$
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ReviewStatus {
  PENDING
  APPROVED
  FLAGGED
  REMOVED
}

enum UserRole {
  USER
  BUSINESS_OWNER
  MODERATOR
  ADMIN
}

// ==================== LOCATION TABLES ====================

model State {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code        String   @unique @db.VarChar(2) // e.g., "CA"
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100) // for SEO-friendly URLs
  boundary    Json?    @db.Json // PostGIS geometry as GeoJSON
  center_lat  Float
  center_lng  Float
  population  Int?
  area_sq_km  Float?
  timezone    String   @db.VarChar(50)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  counties    County[]
  cities      City[]
  businesses  Business[]

  @@index([slug])
  @@index([center_lat, center_lng])
  @@map("states")
}

model County {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  state_id    String   @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(200)
  fips_code   String?  @unique @db.VarChar(5) // Federal Information Processing Standards code
  boundary    Json?    @db.Json
  center_lat  Float
  center_lng  Float
  population  Int?
  area_sq_km  Float?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  state       State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
  cities      City[]
  businesses  Business[]

  @@unique([state_id, slug])
  @@index([state_id])
  @@index([slug])
  @@index([center_lat, center_lng])
  @@map("counties")
}

model City {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  state_id    String   @db.Uuid
  county_id   String?  @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @db.VarChar(200)
  boundary    Json?    @db.Json
  center_lat  Float
  center_lng  Float
  population  Int?
  area_sq_km  Float?
  is_major    Boolean  @default(false) // For highlighting major cities
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  state       State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
  county      County?    @relation(fields: [county_id], references: [id], onDelete: SetNull)
  businesses  Business[]
  zip_codes   ZipCode[]

  @@unique([state_id, slug])
  @@index([state_id])
  @@index([county_id])
  @@index([slug])
  @@index([center_lat, center_lng])
  @@index([is_major])
  @@map("cities")
}

model ZipCode {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code        String   @unique @db.VarChar(10)
  city_id     String?  @db.Uuid
  state_code  String   @db.VarChar(2)
  boundary    Json?    @db.Json
  center_lat  Float
  center_lng  Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  city        City?      @relation(fields: [city_id], references: [id], onDelete: SetNull)
  businesses  Business[]

  @@index([code])
  @@index([center_lat, center_lng])
  @@map("zip_codes")
}

// ==================== SERVICE CATEGORIES ====================

model ServiceCategory {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String   @db.VarChar(100)
  slug            String   @unique @db.VarChar(100)
  display_name    String   @db.VarChar(100)
  description     String?  @db.Text
  icon            String?  @db.VarChar(50) // Icon identifier
  parent_id       String?  @db.Uuid
  display_order   Int      @default(0)
  is_active       Boolean  @default(true)
  meta_title      String?  @db.VarChar(200)
  meta_description String? @db.Text
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  parent          ServiceCategory?  @relation("CategoryHierarchy", fields: [parent_id], references: [id], onDelete: SetNull)
  children        ServiceCategory[] @relation("CategoryHierarchy")
  services        ServiceType[]
  business_services BusinessService[]

  @@index([slug])
  @@index([parent_id])
  @@index([display_order])
  @@map("service_categories")
}

model ServiceType {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  category_id     String   @db.Uuid
  name            String   @db.VarChar(200)
  slug            String   @unique @db.VarChar(200)
  description     String?  @db.Text
  typical_price_min Float?
  typical_price_max Float?
  duration_minutes Int?     // Typical service duration
  is_emergency    Boolean  @default(false)
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  category        ServiceCategory   @relation(fields: [category_id], references: [id], onDelete: Cascade)
  business_services BusinessService[]
  pricing_items   PricingItem[]

  @@unique([category_id, slug])
  @@index([category_id])
  @@index([slug])
  @@index([is_emergency])
  @@map("service_types")
}

// ==================== BUSINESS TABLES ====================

model Business {
  id                String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String            @db.VarChar(200)
  slug              String            @unique @db.VarChar(300)
  legal_name        String?           @db.VarChar(200)
  ein               String?           @db.VarChar(20) // Encrypted Employer Identification Number

  // Status and Verification
  status            BusinessStatus    @default(PENDING)
  verification_level VerificationLevel @default(BASIC)
  verified_at       DateTime?
  verification_notes String?          @db.Text

  // Contact Information
  email             String            @db.VarChar(255)
  phone             String            @db.VarChar(20)
  phone_secondary   String?           @db.VarChar(20)
  website           String?           @db.VarChar(500)

  // Address and Location
  address_line1     String            @db.VarChar(200)
  address_line2     String?           @db.VarChar(200)
  city_id           String?           @db.Uuid
  county_id         String?           @db.Uuid
  state_id          String            @db.Uuid
  zip_code_id       String?           @db.Uuid
  postal_code       String            @db.VarChar(10)

  // Geographic Data (PostGIS Point)
  latitude          Float
  longitude         Float
  location          Json?             @db.Json // PostGIS Point as GeoJSON
  service_radius_miles Float          @default(25)

  // Business Details
  description       String?           @db.Text
  short_description String?           @db.VarChar(500)
  year_established  Int?
  employee_count    Int?
  price_range       PriceRange?
  accepts_credit_cards Boolean        @default(true)
  accepts_cash      Boolean           @default(true)
  accepts_check     Boolean           @default(false)
  is_licensed       Boolean           @default(false)
  is_insured        Boolean           @default(false)
  is_bonded         Boolean           @default(false)
  license_number    String?           @db.VarChar(100)
  insurance_amount  Float?

  // Emergency Services
  offers_emergency  Boolean           @default(false)
  emergency_fee     Float?

  // SEO and Display
  logo_url          String?           @db.VarChar(500)
  cover_image_url   String?           @db.VarChar(500)
  featured_until    DateTime?
  display_priority  Int               @default(0) // Higher = more prominent

  // Statistics (Denormalized for performance)
  total_reviews     Int               @default(0)
  average_rating    Float             @default(0)
  response_time_hours Int?            // Average response time
  completion_rate   Float?            // Jobs completed vs quoted

  // Timestamps
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  last_active_at    DateTime?

  // Relations
  owner             User?             @relation(fields: [owner_id], references: [id])
  owner_id          String?           @db.Uuid
  city              City?             @relation(fields: [city_id], references: [id])
  county            County?           @relation(fields: [county_id], references: [id])
  state             State             @relation(fields: [state_id], references: [id])
  zip_code          ZipCode?          @relation(fields: [zip_code_id], references: [id])

  services          BusinessService[]
  hours             BusinessHours[]
  reviews           Review[]
  media             BusinessMedia[]
  certifications    Certification[]
  pricing_items     PricingItem[]
  service_areas     ServiceArea[]
  leads             Lead[]

  @@index([slug])
  @@index([state_id])
  @@index([city_id])
  @@index([county_id])
  @@index([status])
  @@index([verification_level])
  @@index([latitude, longitude])
  @@index([average_rating])
  @@index([total_reviews])
  @@index([display_priority])
  @@index([featured_until])
  @@map("businesses")
}

model BusinessService {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id     String   @db.Uuid
  category_id     String   @db.Uuid
  service_type_id String?  @db.Uuid
  is_primary      Boolean  @default(false)
  created_at      DateTime @default(now())

  business        Business        @relation(fields: [business_id], references: [id], onDelete: Cascade)
  category        ServiceCategory @relation(fields: [category_id], references: [id])
  service_type    ServiceType?    @relation(fields: [service_type_id], references: [id])

  @@unique([business_id, category_id, service_type_id])
  @@index([business_id])
  @@index([category_id])
  @@map("business_services")
}

model BusinessHours {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id String    @db.Uuid
  day         DayOfWeek
  open_time   String    @db.VarChar(5) // "09:00"
  close_time  String    @db.VarChar(5) // "17:00"
  is_closed   Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  business    Business  @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique([business_id, day])
  @@index([business_id])
  @@map("business_hours")
}

model ServiceArea {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id String   @db.Uuid
  zip_code    String   @db.VarChar(10)
  city_name   String?  @db.VarChar(100)
  state_code  String   @db.VarChar(2)
  is_primary  Boolean  @default(false)
  created_at  DateTime @default(now())

  business    Business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@unique([business_id, zip_code])
  @@index([business_id])
  @@index([zip_code])
  @@map("service_areas")
}

// ==================== PRICING ====================

model PricingItem {
  id              String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id     String      @db.Uuid
  service_type_id String?     @db.Uuid
  name            String      @db.VarChar(200)
  description     String?     @db.Text
  price_min       Float?
  price_max       Float?
  price_fixed     Float?
  price_unit      String?     @db.VarChar(50) // "per hour", "per sqft", etc.
  is_active       Boolean     @default(true)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt

  business        Business    @relation(fields: [business_id], references: [id], onDelete: Cascade)
  service_type    ServiceType? @relation(fields: [service_type_id], references: [id])

  @@index([business_id])
  @@index([service_type_id])
  @@map("pricing_items")
}

// ==================== REVIEWS ====================

model Review {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id     String       @db.Uuid
  user_id         String       @db.Uuid
  rating          Int          // 1-5
  title           String?      @db.VarChar(200)
  content         String       @db.Text

  // Service Details
  service_date    DateTime?
  service_type    String?      @db.VarChar(200)
  project_cost    Float?

  // Review Metadata
  status          ReviewStatus @default(PENDING)
  is_verified     Boolean      @default(false) // Verified purchase/service
  helpful_count   Int          @default(0)
  response        String?      @db.Text // Business owner response
  response_date   DateTime?

  // Media
  images          Json?        @db.Json // Array of image URLs

  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  business        Business     @relation(fields: [business_id], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [user_id], references: [id])

  @@unique([business_id, user_id])
  @@index([business_id])
  @@index([user_id])
  @@index([rating])
  @@index([status])
  @@index([created_at])
  @@map("reviews")
}

// ==================== USERS ====================

model User {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email           String    @unique @db.VarChar(255)
  email_verified  Boolean   @default(false)
  password_hash   String    @db.VarChar(255)

  // Profile
  first_name      String    @db.VarChar(100)
  last_name       String    @db.VarChar(100)
  display_name    String?   @db.VarChar(200)
  phone           String?   @db.VarChar(20)
  avatar_url      String?   @db.VarChar(500)

  // Location
  city            String?   @db.VarChar(100)
  state_code      String?   @db.VarChar(2)
  zip_code        String?   @db.VarChar(10)

  // Role and Permissions
  role            UserRole  @default(USER)
  is_active       Boolean   @default(true)
  is_banned       Boolean   @default(false)
  ban_reason      String?   @db.Text

  // Timestamps
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  last_login_at   DateTime?

  businesses      Business[]
  reviews         Review[]
  leads           Lead[]

  @@index([email])
  @@index([role])
  @@map("users")
}

// ==================== SUPPORTING TABLES ====================

model BusinessMedia {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id String   @db.Uuid
  url         String   @db.VarChar(500)
  type        String   @db.VarChar(50) // "image", "video", "document"
  title       String?  @db.VarChar(200)
  description String?  @db.Text
  is_primary  Boolean  @default(false)
  display_order Int    @default(0)
  created_at  DateTime @default(now())

  business    Business @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@index([business_id])
  @@map("business_media")
}

model Certification {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id     String    @db.Uuid
  name            String    @db.VarChar(200)
  issuer          String    @db.VarChar(200)
  credential_id   String?   @db.VarChar(100)
  issue_date      DateTime?
  expiry_date     DateTime?
  document_url    String?   @db.VarChar(500)
  is_verified     Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  business        Business  @relation(fields: [business_id], references: [id], onDelete: Cascade)

  @@index([business_id])
  @@map("certifications")
}

model Lead {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  business_id     String   @db.Uuid
  user_id         String?  @db.Uuid

  // Contact Info
  name            String   @db.VarChar(200)
  email           String   @db.VarChar(255)
  phone           String   @db.VarChar(20)

  // Lead Details
  service_needed  String   @db.Text
  timeline        String?  @db.VarChar(100)
  budget_range    String?  @db.VarChar(100)
  zip_code        String   @db.VarChar(10)

  // Tracking
  source          String?  @db.VarChar(100) // "website", "phone", "email"
  status          String   @default("new") @db.VarChar(50)

  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  business        Business @relation(fields: [business_id], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [user_id], references: [id])

  @@index([business_id])
  @@index([user_id])
  @@index([created_at])
  @@map("leads")
}